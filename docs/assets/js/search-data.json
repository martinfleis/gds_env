{"0": {
    "doc": "gds",
    "title": "Python + R: gds",
    "content": " ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds/#python--r-gds",
    "relUrl": "/stacks/gds/#python--r-gds"
  },"1": {
    "doc": "gds",
    "title": "Build and run with Vagrant",
    "content": "In this document, you will learn to create a VirtualBox VM that runs the gds_env container using vagrant. ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds/#build-and-run-with-vagrant",
    "relUrl": "/stacks/gds/#build-and-run-with-vagrant"
  },"2": {
    "doc": "gds",
    "title": "Requirements",
    "content": "This approach does not require Docker installed on the host machine, but the following needs to be installed and available: . | VirtualBox | vagrant | The Vagrantfile for this project, available to download here. | . Once the VM is created, only VirtualBox is required to run it. ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds/#requirements",
    "relUrl": "/stacks/gds/#requirements"
  },"3": {
    "doc": "gds",
    "title": "Provision VirtualBox image",
    "content": "To provision a VM that runs Docker and the gds_env image on startup, automatically, navigate to the folder with the Vagrantfile: . cd path/to/my/folder . And run: . vagrant up . The first time you run this on a machine, it will take a long time and will require a good internet connection as it has to download all the components of the Docker image, as well as a lightweight layer to make it run on VirtualBox. When completed, you should be able to point your browser to localhost:8888 and JupyterLab should be running. Once built, you can export the VM into an .ova file for transport. Before that, make sure the VM is not running: . vagrant halt . And then export with the following command: . vboxmanage export \"GDS Box\" -o gds_4p1_vagrant.ova . This might take a while but will result on a compressed single file that can be imported by VirtualBox on a different machine. ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds/#provision-virtualbox-image",
    "relUrl": "/stacks/gds/#provision-virtualbox-image"
  },"4": {
    "doc": "gds",
    "title": "Run VM through vagrant + VirtualBox",
    "content": "Once built, every time you want to start the VM again, you need to navigate to the folder where you keep the Vagrantfile: . cd path/to/my/folder . And run: . vagrant up . If the VM is built, booting up should only take a few seconds, one or two minutes at the most depending on hardware. Once ready, you should be able to point your browser to localhost:8888 and JupyterLab should be running. Password . To login to the JupyterLab instance you will need the password geods. File sharing . By default, the folder where you keep the Vagrantfile and where you run vagrant up from is mounted under /home/jovyan/work in the container. This means that, when you access JupyterLab, the work folder that appears on the left-hand side is a “window” into the folder in the host where you start the VM from. NOTE: you can access all the files and folders within the folder from which you start the session, but you cannot move outside such location. Shutting down . Once you are done with your work and want to stop JupyterLab, you can run: . vagrant halt . ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds/#run-vm-through-vagrant--virtualbox",
    "relUrl": "/stacks/gds/#run-vm-through-vagrant--virtualbox"
  },"5": {
    "doc": "gds",
    "title": "gds",
    "content": " ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds/",
    "relUrl": "/stacks/gds/"
  },"6": {
    "doc": "gds_dev",
    "title": "Python + R + dev tools: gds_dev",
    "content": " ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds_dev/#python--r--dev-tools-gds_dev",
    "relUrl": "/stacks/gds_dev/#python--r--dev-tools-gds_dev"
  },"7": {
    "doc": "gds_dev",
    "title": "Contents",
    "content": "The gds_dev flavour contains a full gds stack, plus a few development tools geared towards open source computing. Broadly speaking, these include: . | decktape, for building high-quality PDF files from HTML slides. | jekyll, for building static websites. | tippecanoe, to create vector tilesets. | A full-fledge install of the Vim editor. | . ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds_dev/#contents",
    "relUrl": "/stacks/gds_dev/#contents"
  },"8": {
    "doc": "gds_dev",
    "title": "Install",
    "content": "The Docker image can be downloaded with the following command: . docker pull darribas/gds_dev:4.1 . ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds_dev/#install",
    "relUrl": "/stacks/gds_dev/#install"
  },"9": {
    "doc": "gds_dev",
    "title": "gds_dev",
    "content": " ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds_dev/",
    "relUrl": "/stacks/gds_dev/"
  },"10": {
    "doc": "gds_py",
    "title": "Python: gds_py",
    "content": "`gds_py` library list GDS version: 4.1 Executing the command: conda list # packages in environment at /opt/conda: # # Name Version Build Channel _libgcc_mutex 0.1 conda_forge conda-forge _openmp_mutex 4.5 1_llvm conda-forge abseil-cpp 20200225.1 he1b5a44_2 conda-forge aenum 2.2.3 pypi_0 pypi affine 2.3.0 py_0 conda-forge alembic 1.4.2 pyh9f0ad1d_0 conda-forge appdirs 1.4.3 py_1 conda-forge arrow-cpp 0.16.0 py37h989c1cb_2 conda-forge async_generator 1.10 py_0 conda-forge attrs 19.3.0 py_0 conda-forge aws-requests-auth 0.4.2 py_0 conda-forge aws-sdk-cpp 1.7.164 hc831370_1 conda-forge backcall 0.1.0 py_0 conda-forge beautifulsoup4 4.9.0 py37hc8dfbb8_0 conda-forge black 19.10b0 py37_0 conda-forge bleach 3.1.4 pyh9f0ad1d_0 conda-forge blinker 1.4 py_1 conda-forge blosc 1.18.1 he1b5a44_0 conda-forge bokeh 2.0.1 py37hc8dfbb8_0 conda-forge bolt-python 0.7.1 pypi_0 pypi boost-cpp 1.72.0 h8e57a91_0 conda-forge boto 2.49.0 pypi_0 pypi boto3 1.12.39 pyh9f0ad1d_0 conda-forge botocore 1.15.39 pyh9f0ad1d_0 conda-forge branca 0.3.1 py_0 conda-forge brotli 1.0.7 he1b5a44_1001 conda-forge bzip2 1.0.8 h516909a_2 conda-forge c-ares 1.15.0 h516909a_1001 conda-forge ca-certificates 2020.4.5.1 hecc5488_0 conda-forge cairo 1.16.0 hcf35c78_1003 conda-forge cenpy 1.0.0.post2 py_0 conda-forge certifi 2020.4.5.1 py37hc8dfbb8_0 conda-forge certipy 0.1.3 py_0 conda-forge cffi 1.14.0 py37hd463f26_0 conda-forge cfitsio 3.470 hb60a0a2_2 conda-forge chardet 3.0.4 py37hc8dfbb8_1006 conda-forge click 7.1.1 pyh8c360ce_0 conda-forge click-plugins 1.1.1 py_0 conda-forge cligj 0.5.0 py_0 conda-forge cloudpickle 1.3.0 py_0 conda-forge colorama 0.4.3 py_0 conda-forge colorcet 2.0.2 py_0 pyviz conda 4.7.12 py37_0 conda-forge conda-package-handling 1.6.0 py37h8f50634_2 conda-forge configurable-http-proxy 4.2.1 node13_he01fd0c_0 conda-forge contextily 1.0.0 py_0 conda-forge cryptography 2.8 py37hb09aad4_2 conda-forge curl 7.69.1 h33f0ec9_0 conda-forge cycler 0.10.0 py_2 conda-forge cython 0.29.16 py37h3340039_0 conda-forge cytoolz 0.10.1 py37h516909a_0 conda-forge dask 2.14.0 py_0 conda-forge dask-core 2.14.0 py_0 conda-forge dask-glm 0.2.0 py_1 conda-forge dask-ml 1.2.0 py_0 conda-forge datashader 0.10.0 py_0 pyviz datashape 0.5.4 py_1 conda-forge decorator 4.4.2 py_0 conda-forge defusedxml 0.6.0 py_0 conda-forge deprecated 1.2.8 pyh9f0ad1d_0 conda-forge descartes 1.1.0 py_4 conda-forge dill 0.3.1.1 py37hc8dfbb8_1 conda-forge distributed 2.14.0 py37hc8dfbb8_0 conda-forge dnspython 1.16.0 py_1 conda-forge docutils 0.15.2 py37_0 conda-forge ecdsa 0.13 py_0 conda-forge entrypoints 0.3 py37hc8dfbb8_1001 conda-forge eo-learn 0.7.3 pypi_0 pypi eo-learn-core 0.7.3 pypi_0 pypi eo-learn-coregistration 0.7.3 pypi_0 pypi eo-learn-features 0.7.3 pypi_0 pypi eo-learn-geometry 0.7.3 pypi_0 pypi eo-learn-io 0.7.3 pypi_0 pypi eo-learn-mask 0.7.3 pypi_0 pypi eo-learn-ml-tools 0.7.3 pypi_0 pypi eo-learn-visualization 0.7.3 pypi_0 pypi esda 2.2.1 py_0 conda-forge expat 2.2.9 he1b5a44_2 conda-forge fastcache 1.1.0 py37h8f50634_1 conda-forge feather-format 0.4.0 py_1003 conda-forge fiona 1.8.9.post2 py37hdff7cfa_0 conda-forge flask 1.1.2 pyh9f0ad1d_0 conda-forge flask_cors 3.0.8 py_0 conda-forge flask_json 0.3.4 py_0 conda-forge folium 0.10.1 py_0 conda-forge fontconfig 2.13.1 h86ecdb6_1001 conda-forge freetype 2.10.1 he06d7ca_0 conda-forge freexl 1.0.5 h14c3975_1002 conda-forge fs 2.4.11 pypi_0 pypi fs-s3fs 1.1.1 pypi_0 pypi fsspec 0.7.2 py_0 conda-forge fuzzywuzzy 0.17.0 py_0 conda-forge gdal 2.4.4 py37h5f563d9_0 conda-forge geographiclib 1.50 py_0 conda-forge geopandas 0.7.0 py_1 conda-forge geopy 1.21.0 py_0 conda-forge geos 3.8.0 he1b5a44_1 conda-forge geotiff 1.5.1 h38872f0_8 conda-forge gettext 0.19.8.1 hc5be6a0_1002 conda-forge gflags 2.2.2 he1b5a44_1002 conda-forge giddy 2.3.0 py_0 conda-forge giflib 5.1.7 h516909a_1 conda-forge gitdb 4.0.2 py_0 conda-forge gitdb2 4.0.2 py_0 conda-forge gitpython 3.1.0 py_0 conda-forge glib 2.58.3 py37he00f558_1004 conda-forge glog 0.4.0 he1b5a44_1 conda-forge gmp 6.2.0 he1b5a44_2 conda-forge gmpy2 2.1.0b1 py37h04dde30_0 conda-forge grpc-cpp 1.28.1 h7397029_0 conda-forge hdbscan 0.8.26 py37h03ebfcd_0 conda-forge hdf4 4.2.13 hf30be14_1003 conda-forge hdf5 1.10.5 nompi_h3c11f04_1104 conda-forge heapdict 1.0.1 py_0 conda-forge icu 64.2 he1b5a44_1 conda-forge idna 2.9 py_1 conda-forge imagecodecs 2020.2.18 pypi_0 pypi imageio 2.8.0 py_0 conda-forge importlib-metadata 1.6.0 py37hc8dfbb8_0 conda-forge importlib_metadata 1.6.0 0 conda-forge inequality 1.0.0 py_0 conda-forge ipykernel 5.2.0 py37h43977f1_1 conda-forge ipyleaflet 0.12.3 py_1 conda-forge ipympl 0.5.6 pyh9f0ad1d_1 conda-forge ipyparallel 6.2.4 py37hc8dfbb8_0 conda-forge ipython 7.13.0 py37hc8dfbb8_2 conda-forge ipython_genutils 0.2.0 py_1 conda-forge ipywidgets 7.5.1 py_0 conda-forge itsdangerous 1.1.0 py_0 conda-forge jedi 0.16.0 py37hc8dfbb8_1 conda-forge jinja2 2.11.1 py_0 conda-forge jmespath 0.9.5 py_0 conda-forge joblib 0.14.1 py_0 conda-forge jpeg 9c h14c3975_1001 conda-forge json-c 0.13.1 h14c3975_1001 conda-forge json5 0.9.0 py_0 conda-forge jsonlines 1.2.0 py_1 conda-forge jsonschema 3.2.0 py37hc8dfbb8_1 conda-forge jupyter_client 6.1.2 py_0 conda-forge jupyter_core 4.6.3 py37hc8dfbb8_1 conda-forge jupyterhub 1.0.0 py37_0 conda-forge jupyterlab 1.2.1 py_0 conda-forge jupyterlab_server 1.1.0 py_1 conda-forge kealib 1.4.13 hec59c27_0 conda-forge kiwisolver 1.2.0 py37h99015e2_0 conda-forge krb5 1.17.1 h2fd8d38_0 conda-forge ld_impl_linux-64 2.34 h53a641e_0 conda-forge libblas 3.8.0 16_openblas conda-forge libcblas 3.8.0 16_openblas conda-forge libcurl 7.69.1 hf7181ac_0 conda-forge libdap4 3.20.4 hd3bb157_0 conda-forge libedit 3.1.20170329 hf8c457e_1001 conda-forge libevent 2.1.10 h72c5cf5_0 conda-forge libffi 3.2.1 he1b5a44_1007 conda-forge libgcc-ng 9.2.0 h24d8f2e_2 conda-forge libgdal 2.4.4 h2b6fda6_0 conda-forge libgfortran-ng 7.3.0 hdf63c60_5 conda-forge libgomp 9.2.0 h24d8f2e_2 conda-forge libiconv 1.15 h516909a_1006 conda-forge libkml 1.3.0 hb574062_1011 conda-forge liblapack 3.8.0 16_openblas conda-forge libllvm8 8.0.1 hc9558a2_0 conda-forge libnetcdf 4.7.3 nompi_h9f9fd6a_101 conda-forge libopenblas 0.3.9 h5ec1e0e_0 conda-forge libpng 1.6.37 hed695b0_1 conda-forge libpq 12.2 h5513abc_1 conda-forge libprotobuf 3.11.4 h8b12597_0 conda-forge libpysal 4.2.2 py_0 conda-forge libsodium 1.0.17 h516909a_0 conda-forge libspatialindex 1.9.3 he1b5a44_3 conda-forge libspatialite 4.3.0a ha48a99a_1034 conda-forge libssh2 1.8.2 h22169c7_2 conda-forge libstdcxx-ng 9.2.0 hdf63c60_2 conda-forge libtiff 4.1.0 hc7e4089_6 conda-forge libuuid 2.32.1 h14c3975_1000 conda-forge libuv 1.34.0 h516909a_0 conda-forge libwebp-base 1.1.0 h516909a_3 conda-forge libxcb 1.13 h14c3975_1002 conda-forge libxml2 2.9.10 hee79883_0 conda-forge lightgbm 2.3.1 pypi_0 pypi llvm-openmp 9.0.1 hc9558a2_2 conda-forge llvmlite 0.31.0 py37h5202443_1 conda-forge locket 0.2.0 py_2 conda-forge lz4-c 1.8.3 he1b5a44_1001 conda-forge lzo 2.10 h14c3975_1000 conda-forge mako 1.1.0 py_0 conda-forge mapclassify 2.2.0 py_0 conda-forge markupsafe 1.1.1 py37h8f50634_1 conda-forge matplotlib-base 3.2.1 py37h30547a4_0 conda-forge mercantile 1.1.2 py_0 conda-forge mgwr 2.1.1 py_0 conda-forge mistune 0.8.4 py37h516909a_1000 conda-forge mkl 2019.5 281 conda-forge mkl-service 2.3.0 py37h516909a_0 conda-forge mock 3.0.5 py37hc8dfbb8_1 conda-forge mpc 1.1.0 h04dde30_1007 conda-forge mpfr 4.0.2 he80fd80_1 conda-forge mplleaflet 0.0.5 py_4 conda-forge mpmath 1.1.0 py_0 conda-forge msgpack-python 1.0.0 py37h99015e2_1 conda-forge multipledispatch 0.6.0 py_0 conda-forge munch 2.5.0 py_0 conda-forge mypy_extensions 0.4.3 py37hc8dfbb8_1 conda-forge nbconvert 5.6.1 py37_0 conda-forge nbdime 2.0.0 py37hc8dfbb8_0 conda-forge nbformat 5.0.4 py_0 conda-forge ncurses 6.1 hf484d3e_1002 conda-forge networkx 2.4 py_1 conda-forge nodejs 13.12.0 hf5d1a2b_0 conda-forge nose 1.3.7 py37hc8dfbb8_1004 conda-forge notebook 6.0.0 py37_0 conda-forge numba 0.48.0 py37hb3f55d8_0 conda-forge numexpr 2.7.1 py37h0da4684_1 conda-forge numpy 1.18.1 py37h8960a57_1 conda-forge oauthlib 3.0.1 py_0 conda-forge olefile 0.46 py_0 conda-forge opencv-contrib-python-headless 4.2.0.34 pypi_0 pypi openjpeg 2.3.1 h981e76c_3 conda-forge openssl 1.1.1f h516909a_0 conda-forge osmnet 0.1.5 py_3 conda-forge osmnx 0.11.4 py_1 conda-forge packaging 20.1 py_0 conda-forge palettable 3.3.0 py_0 conda-forge pamela 1.0.0 py_0 conda-forge pandana 0.4.4 py37hb3f55d8_1 conda-forge pandas 1.0.3 py37h0da4684_0 conda-forge pandoc 2.9.2 0 conda-forge pandocfilters 1.4.2 py_1 conda-forge param 1.9.3 py_0 pyviz parquet-cpp 1.5.1 2 conda-forge parso 0.6.2 py_0 conda-forge partd 1.1.0 py_0 conda-forge pathspec 0.7.0 py_0 conda-forge patsy 0.5.1 py_0 conda-forge pcre 8.44 he1b5a44_0 conda-forge pexpect 4.8.0 py37hc8dfbb8_1 conda-forge pickleshare 0.7.5 py37hc8dfbb8_1001 conda-forge pillow 7.1.1 py37h718be6c_0 conda-forge pip 20.0.2 py_2 conda-forge pixman 0.38.0 h516909a_1003 conda-forge pointpats 2.1.0 py_1 conda-forge polyline 1.4.0 py_0 conda-forge poppler 0.67.0 h14e79db_8 conda-forge poppler-data 0.4.9 1 conda-forge postgresql 12.2 h8573dbc_1 conda-forge proj 6.3.0 hc80f0dc_0 conda-forge prometheus_client 0.7.1 py_0 conda-forge prompt-toolkit 3.0.5 py_0 conda-forge psutil 5.7.0 py37h8f50634_1 conda-forge pthread-stubs 0.4 h14c3975_1001 conda-forge ptyprocess 0.6.0 py_1001 conda-forge pyarrow 0.16.0 py37hd02d5f2_2 conda-forge pycosat 0.6.3 py37h8f50634_1004 conda-forge pycparser 2.20 py_0 conda-forge pycryptodome 3.9.7 py37hb05bdb2_1 conda-forge pyct 0.4.6 py_0 pyviz pyct-core 0.4.6 py_0 pyviz pycurl 7.43.0.5 py37h16ce93b_0 conda-forge pydot 1.4.1 pypi_0 pypi pygeoda 0.0.3 pypi_0 pypi pygments 2.6.1 py_0 conda-forge pyjwt 1.7.1 py_0 conda-forge pyopenssl 19.1.0 py_1 conda-forge pyparsing 2.4.7 pyh9f0ad1d_0 conda-forge pyproj 2.5.0 py37h8ff28aa_0 conda-forge pyrsistent 0.16.0 py37h8f50634_0 conda-forge pysal 2.2.0 py_0 conda-forge pysocks 1.7.1 py37hc8dfbb8_1 conda-forge pytables 3.6.1 py37h9f153d1_1 conda-forge python 3.7.6 h8356626_5_cpython conda-forge python-dateutil 2.8.0 py_0 conda-forge python-editor 1.0.4 py_0 conda-forge python-graphviz 0.13.2 pypi_0 pypi python-levenshtein 0.12.0 py37h516909a_1001 conda-forge python_abi 3.7 1_cp37m conda-forge pytz 2019.3 py_0 conda-forge pywavelets 1.1.1 py37hc1659b7_0 conda-forge pyyaml 5.3.1 py37h8f50634_0 conda-forge pyzmq 19.0.0 py37hac76be4_1 conda-forge qgrid 1.1.1 py37_1001 conda-forge quantecon 0.4.5 py37_1 conda-forge quilt3 3.1.12 py37hc8dfbb8_0 conda-forge rasterio 1.1.3 py37hdff7cfa_0 conda-forge rasterstats 0.14.0 py_0 conda-forge re2 2020.04.01 he1b5a44_0 conda-forge readline 8.0 hf8c457e_0 conda-forge regex 2020.4.4 py37h8f50634_0 conda-forge requests 2.23.0 pyh8c360ce_2 conda-forge requests-futures 1.0.0 py37hc8dfbb8_1 conda-forge requests-oauthlib 1.3.0 pypi_0 pypi retrying 1.3.3 py_2 conda-forge rpy2 3.2.7 pypi_0 pypi rtree 0.9.4 py37h8526d28_1 conda-forge ruamel_yaml 0.15.80 py37h8f50634_1001 conda-forge s2cloudless 1.4.0 pypi_0 pypi s3transfer 0.3.3 py37hc8dfbb8_1 conda-forge scikit-image 0.16.2 py37hb3f55d8_0 conda-forge scikit-learn 0.22.2.post1 py37hcdab131_0 conda-forge scipy 1.4.1 py37ha3d9a3c_2 conda-forge seaborn 0.10.0 py_1 conda-forge segregation 1.2.0 py_1 conda-forge send2trash 1.5.0 py_0 conda-forge sentinelhub 3.0.2 pypi_0 pypi setuptools 46.1.3 py37hc8dfbb8_0 conda-forge shapely 1.7.0 py37hb106bac_1 conda-forge simplejson 3.17.0 py37h516909a_0 conda-forge six 1.14.0 py_1 conda-forge smmap 3.0.1 py_0 conda-forge smmap2 3.0.1 py_0 conda-forge snappy 1.1.8 he1b5a44_1 conda-forge snuggs 1.4.7 py_0 conda-forge sortedcontainers 2.1.0 py_0 conda-forge soupsieve 1.9.4 py37hc8dfbb8_1 conda-forge spaghetti 1.4.2.post2 py_0 conda-forge spatialpandas 0.3.5 py_0 pyviz spglm 1.0.7 py_0 conda-forge spint 1.0.6 py_0 conda-forge splot 1.1.3 py_0 conda-forge spreg 1.1.1 py_0 conda-forge spvcm 0.3.0 py_0 conda-forge sqlalchemy 1.3.16 py37h8f50634_0 conda-forge sqlite 3.30.1 hcee41ef_0 conda-forge statsmodels 0.11.1 py37h8f50634_1 conda-forge sympy 1.5.1 py37hc8dfbb8_3 conda-forge tblib 1.6.0 py_0 conda-forge tenacity 6.1.0 py37hc8dfbb8_1 conda-forge terminado 0.8.3 py37hc8dfbb8_1 conda-forge testpath 0.4.4 py_0 conda-forge thrift-cpp 0.13.0 h62aa4f2_2 conda-forge thunder-python 1.4.2 pypi_0 pypi thunder-registration 1.0.1 pypi_0 pypi tifffile 2020.2.16 pypi_0 pypi tini 0.18.0 h14c3975_1001 conda-forge tk 8.6.10 hed695b0_0 conda-forge tobler 0.2.2 py_0 conda-forge toml 0.10.0 py_0 conda-forge toolz 0.10.0 py_0 conda-forge tornado 6.0.4 py37h8f50634_1 conda-forge tqdm 4.45.0 pyh9f0ad1d_0 conda-forge traitlets 4.3.3 py37hc8dfbb8_1 conda-forge traittypes 0.2.1 py_1 conda-forge typed-ast 1.4.1 py37h516909a_0 conda-forge typing_extensions 3.7.4.1 py37hc8dfbb8_3 conda-forge tzcode 2019a h516909a_1002 conda-forge tzlocal 2.0.0 py_0 conda-forge urbanaccess 0.2.0 py_1 conda-forge urllib3 1.24.3 py37_0 conda-forge utm 0.5.0 pypi_0 pypi vincent 0.4.4 py_1 conda-forge wcwidth 0.1.9 pyh9f0ad1d_0 conda-forge webencodings 0.5.1 py_1 conda-forge werkzeug 1.0.1 pyh9f0ad1d_0 conda-forge wheel 0.34.2 py_1 conda-forge widgetsnbextension 3.5.1 py37_0 conda-forge wrapt 1.12.1 py37h8f50634_1 conda-forge xarray 0.15.1 py_0 conda-forge xerces-c 3.2.2 h8412b87_1004 conda-forge xlrd 1.2.0 py_0 conda-forge xlsxwriter 1.2.8 py_0 conda-forge xorg-kbproto 1.0.7 h14c3975_1002 conda-forge xorg-libice 1.0.10 h516909a_0 conda-forge xorg-libsm 1.2.3 h84519dc_1000 conda-forge xorg-libx11 1.6.9 h516909a_0 conda-forge xorg-libxau 1.0.9 h14c3975_0 conda-forge xorg-libxdmcp 1.1.3 h516909a_0 conda-forge xorg-libxext 1.3.4 h516909a_0 conda-forge xorg-libxrender 0.9.10 h516909a_1002 conda-forge xorg-renderproto 0.11.1 h14c3975_1002 conda-forge xorg-xextproto 7.3.0 h14c3975_1002 conda-forge xorg-xproto 7.0.31 h14c3975_1007 conda-forge xz 5.2.5 h516909a_0 conda-forge yaml 0.2.2 h516909a_1 conda-forge zeromq 4.3.2 he1b5a44_2 conda-forge zict 2.0.0 py_0 conda-forge zipp 3.1.0 py_0 conda-forge zlib 1.2.11 h516909a_1006 conda-forge zstd 1.4.4 h3b9ef0a_2 conda-forge . ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds_py/#python-gds_py",
    "relUrl": "/stacks/gds_py/#python-gds_py"
  },"11": {
    "doc": "gds_py",
    "title": "gds_py",
    "content": " ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/gds_py/",
    "relUrl": "/stacks/gds_py/"
  },"12": {
    "doc": "Guides",
    "title": "Guides",
    "content": "This section provides several guides to build, install and deploy the gds_env in a variety of contexts. ",
    "url": "http://192.168.1.93:4000/gds_env/guides/",
    "relUrl": "/guides/"
  },"13": {
    "doc": "Welcome",
    "title": "Welcome",
    "content": "Test blah blah . ",
    "url": "http://192.168.1.93:4000/gds_env/",
    "relUrl": "/"
  },"14": {
    "doc": "Stacks",
    "title": "Stacks",
    "content": "The gds_env is composed of three inter-connected stacks. ",
    "url": "http://192.168.1.93:4000/gds_env/stacks/",
    "relUrl": "/stacks/"
  },"15": {
    "doc": "Vagrant - Build",
    "title": "Build and run with Vagrant",
    "content": "In this document, you will learn to create a VirtualBox VM that runs the gds_env container using vagrant. ",
    "url": "http://192.168.1.93:4000/gds_env/guides/vagrant_build/#build-and-run-with-vagrant",
    "relUrl": "/guides/vagrant_build/#build-and-run-with-vagrant"
  },"16": {
    "doc": "Vagrant - Build",
    "title": "Requirements",
    "content": "This approach does not require Docker installed on the host machine, but the following needs to be installed and available: . | VirtualBox | vagrant | The Vagrantfile for this project, available to download here. | . Once the VM is created, only VirtualBox is required to run it. ",
    "url": "http://192.168.1.93:4000/gds_env/guides/vagrant_build/#requirements",
    "relUrl": "/guides/vagrant_build/#requirements"
  },"17": {
    "doc": "Vagrant - Build",
    "title": "Provision VirtualBox image",
    "content": "To provision a VM that runs Docker and the gds_env image on startup, automatically, navigate to the folder with the Vagrantfile: . cd path/to/my/folder . And run: . vagrant up . The first time you run this on a machine, it will take a long time and will require a good internet connection as it has to download all the components of the Docker image, as well as a lightweight layer to make it run on VirtualBox. When completed, you should be able to point your browser to localhost:8888 and JupyterLab should be running. Once built, you can export the VM into an .ova file for transport. Before that, make sure the VM is not running: . vagrant halt . And then export with the following command: . vboxmanage export \"GDS Box\" -o gds_4p1_vagrant.ova . This might take a while but will result on a compressed single file that can be imported by VirtualBox on a different machine. ",
    "url": "http://192.168.1.93:4000/gds_env/guides/vagrant_build/#provision-virtualbox-image",
    "relUrl": "/guides/vagrant_build/#provision-virtualbox-image"
  },"18": {
    "doc": "Vagrant - Build",
    "title": "Run VM through vagrant + VirtualBox",
    "content": "Once built, every time you want to start the VM again, you need to navigate to the folder where you keep the Vagrantfile: . cd path/to/my/folder . And run: . vagrant up . If the VM is built, booting up should only take a few seconds, one or two minutes at the most depending on hardware. Once ready, you should be able to point your browser to localhost:8888 and JupyterLab should be running. Password . To login to the JupyterLab instance you will need the password geods. File sharing . By default, the folder where you keep the Vagrantfile and where you run vagrant up from is mounted under /home/jovyan/work in the container. This means that, when you access JupyterLab, the work folder that appears on the left-hand side is a “window” into the folder in the host where you start the VM from. NOTE: you can access all the files and folders within the folder from which you start the session, but you cannot move outside such location. Shutting down . Once you are done with your work and want to stop JupyterLab, you can run: . vagrant halt . ",
    "url": "http://192.168.1.93:4000/gds_env/guides/vagrant_build/#run-vm-through-vagrant--virtualbox",
    "relUrl": "/guides/vagrant_build/#run-vm-through-vagrant--virtualbox"
  },"19": {
    "doc": "Vagrant - Build",
    "title": "Vagrant - Build",
    "content": " ",
    "url": "http://192.168.1.93:4000/gds_env/guides/vagrant_build/",
    "relUrl": "/guides/vagrant_build/"
  },"20": {
    "doc": "Virtualbox - Build",
    "title": "Build a VirtualBox VM",
    "content": "This document covers the following two steps: . | Provisioning: how to create a VirtualBox VM that runs the gds_env container | Deployment: import a generated .ova file into VirtualBox | . NOTE: this document relies heavily on this blog post. ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_build/#build-a-virtualbox-vm",
    "relUrl": "/guides/virtualbox_build/#build-a-virtualbox-vm"
  },"21": {
    "doc": "Virtualbox - Build",
    "title": "Provision a VM",
    "content": "Requirements . This approach requires the following to be installed on the machine that will provision the VM: . | VirtualBox | docker | docker-machine | This cloud-config.yml file | . Create a VM . We will set up a VM that runs RancherOS. Following their own docs: . docker-machine create -d virtualbox \\ --virtualbox-boot2docker-url https://releases.rancher.com/os/latest/rancheros.iso \\ --virtualbox-memory 2048 \\ gdsbox . This will create a VirtualBox VM that you can check with VBoxManage: . VBoxManage list vms . You should be able to see something similar to: . \"gdsbox\" {cb546670-3388-461d-8f0f-87ce352e9134} . To set the environment of your shell to that machine: . docker-machine env gdsbox . will display the command to run for that. Keep in mind that that exports environment variables, so if you want to go back to the original, you can: . eval $(docker-machine env gdsbox) . If you want to reset them: . eval $(docker-machine env -u) . Provision it . Now there is a VM, we need to “fill” it with gds_env container. | From the same shell with the gdsbox env activated, we can go ahead and provision the desired container: | . docker pull darribas/gds_&lt;flavour&gt;:&lt;version&gt; . | Now we need to “enter” the VM to add a few extra bits and pieces: | . docker-machine ssh gdsbox -t . | Add autostart of the container. To do this, you will need to add the content of the cloud-config.ymlto the VM cloud-config: | . sudo vi /var/lib/rancher/conf/cloud-config.yml . | Enable and start the VirtualBox tools to make it easy to share folders: | . sudo ros service enable virtualbox-tools sudo ros service up virtualbox-tools . | Leave the inside of the VM: | . exit . Export provisioned VM into .ova . Once the VM is built and provisioned, we can write it into an appliance file. First we need to stop the running VM: . docker-machine stop gdsbox . Then we can export: . VBoxManage export gdsbox --iso -o &lt;file-name&gt;.ova . ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_build/#provision-a-vm",
    "relUrl": "/guides/virtualbox_build/#provision-a-vm"
  },"22": {
    "doc": "Virtualbox - Build",
    "title": "Deployment",
    "content": "For a guide on importing the .ova export and running the resulting VM, please check here. ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_build/#deployment",
    "relUrl": "/guides/virtualbox_build/#deployment"
  },"23": {
    "doc": "Virtualbox - Build",
    "title": "Virtualbox - Build",
    "content": " ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_build/",
    "relUrl": "/guides/virtualbox_build/"
  },"24": {
    "doc": "Virtualbox - Install",
    "title": "Install on VirtualBox",
    "content": "This document details the requirements and steps needed to be able to run the gds_env as a virtual machine (VM) on VirtualBox. ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_install/#install-on-virtualbox",
    "relUrl": "/guides/virtualbox_install/#install-on-virtualbox"
  },"25": {
    "doc": "Virtualbox - Install",
    "title": "Requirements",
    "content": "This tutorial assumes the following is available before start: . | VirtualBox downloaded and installed | A copy of an .ova file containing the GDS image. This online folder contains available files. Please note this is a large file so download will take a while and will require a good internet connection | . ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_install/#requirements",
    "relUrl": "/guides/virtualbox_install/#requirements"
  },"26": {
    "doc": "Virtualbox - Install",
    "title": "Installation",
    "content": "There are three main steps to follow: . | Import the appliance (.ova file) | Forward the required port to the host | Set up a shared folder so the VM can see files in your host machine | . Mac users, please check the section on known issues. It’s important to note these three steps are required to run only once, when setting the VM up in a machine for the first time. Once ready, launching and running the VM is a one-click job. Appliance import . | Go to “File –&gt; Import Appliance…” | Select the .ova file you have downloaded. The import process might take a couple of minutes, but you do not have to do anything | . Port forwarding . The VM will be accessed through your browser. To be able to connect from the host, the port 8888 needs to be able to reach the VM. Here is how you can do it: . | Right click on the gdsbox image and then left-click on “Settings” | Go to the “Network” tab and click on “Advanced” | Click on “Port Forwarding”, this will open up a new dialog window | On the right side, click on “Add new port” button, the one with a + sign. If you hover your mouse over, it will read “Adds new port fordwarding rule”. This will add a new row in the table | In the new row, type “jupyter” under “Name”, leave “Protocol”, “Host IP” and “Guest IP” as they are, and enter 8888 under both “Host Port” and “Guest Port”. | Then click OK on the bottom right part of the dialog window | . Folder sharing . The following steps allow you to select a folder on the host that will be accessible from the VM. | Right click on the gdsbox image and left-click on “Settings” | Go to the “Shared Folders” tab | Click on the button that has a folder with a + sign icon. If you hover your mouse it will read “Add new shared folder” in the top right | Click on “Folder Path” and select “Other” from the folder path dropdown | Point to the folder you want to share with the VM | Use “rancheros” under the “Folder Name” box | Leave “Mount point” blank and make sure “Auto-mount” and “Read-only” are not checked | . Mac known issues . If you are going over this process on a modern Mac, you will need to allow VirtualBox access rights when it requests them. Additionally, you might encounter the following error when importing the appliance: . Nonexistent host networking interface, name '' (VERR_INTERNAL_ERROR). Result Code: NS_ERROR_FAILURE (0x80004005) Component: ConsoleWrap Interface: IConsole {872da645-4a9b-1727-bee2-5585105b9eed} . This has to do with security settings of macOS. To work around the issue, follow these steps: . | From the main menu, select “File &gt; Host Network Manager”. You should see an empty white box with “Host-only Networks”. | Click the “Create” button. A new Host-only network will be created and added to the list automatically. | . ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_install/#installation",
    "relUrl": "/guides/virtualbox_install/#installation"
  },"27": {
    "doc": "Virtualbox - Install",
    "title": "Running the VM",
    "content": "Once the steps above are followed, you are good to go. To start a session, follow these steps: . | Select gdsbox on the VirtualBox window | On the top row, click on “Start” | A new window will launch with a black console that will start printing output out. This should continue for about 30 seconds, depending on your laptop | When it stops, you should see a Texas longhorn drawn on the console. Everything is ready. | Open a browser (Firefox or Chrome preferably) and point it at localhost:8888 | A page will load, asking you to enter a password. Use geods. | The main JupyterLab interface should load, happy hacking! | . Shared files . The file menu on the left side of JupyterLab should display a single folder named work. This is the bridge to the host. If you double click on it, it will display the files in the folder you have decided to share with VirtualBox. ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_install/#running-the-vm",
    "relUrl": "/guides/virtualbox_install/#running-the-vm"
  },"28": {
    "doc": "Virtualbox - Install",
    "title": "Virtualbox - Install",
    "content": " ",
    "url": "http://192.168.1.93:4000/gds_env/guides/virtualbox_install/",
    "relUrl": "/guides/virtualbox_install/"
  }
}
